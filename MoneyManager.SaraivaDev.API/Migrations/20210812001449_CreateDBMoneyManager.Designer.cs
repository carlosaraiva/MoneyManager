// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyManager.SaraivaDev.API.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MoneyManager.SaraivaDev.API.Migrations
{
    [DbContext(typeof(MoneyManagerContext))]
    [Migration("20210812001449_CreateDBMoneyManager")]
    partial class CreateDBMoneyManager
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.AccountModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("Agency")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HolderName")
                        .HasColumnType("text");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("InitialValue")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MMUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .IsUnique();

                    b.HasIndex("MMUserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.AddressModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Complement")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("MMUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("PreferedMailing")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicPlace")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.CategoryModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryFatherId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryFatherId1")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntryTypeFor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryFatherId1");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "958f5ca3-cf42-4edd-99d0-63d3c703d564",
                            CategoryFatherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "House",
                            EntryTypeFor = 2,
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "559f1154-55ab-4d08-afa6-2598bacf0fc4",
                            CategoryFatherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Phone Bill",
                            EntryTypeFor = 2,
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "acd75628-d303-4b46-b00e-957bb5f89d22",
                            CategoryFatherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Car",
                            EntryTypeFor = 2,
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "00969044-db68-40bc-9408-9db980d7b49e",
                            CategoryFatherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fuel",
                            EntryTypeFor = 2,
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "cacfda99-6ff6-4eba-8512-a3c17f81153e",
                            CategoryFatherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Salary",
                            EntryTypeFor = 1,
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "bc2db162-979c-45bc-8973-e0f69e01d247",
                            CategoryFatherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Profit",
                            EntryTypeFor = 1,
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b1761748-33e8-4944-a04d-00f455f71be7",
                            CategoryFatherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bonus",
                            EntryTypeFor = 1,
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.CostCenterModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CostCenterFatherId")
                        .HasColumnType("text");

                    b.Property<string>("CostCenterId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.ToTable("CostCenter");

                    b.HasData(
                        new
                        {
                            Id = "c57f41c0-b0a4-40ff-ba97-86bb12c5ee8a",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 242, DateTimeKind.Local).AddTicks(5410),
                            Description = "Home",
                            IsActive = true,
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 243, DateTimeKind.Local).AddTicks(7563)
                        },
                        new
                        {
                            Id = "ed28f983-b5d5-4de6-8579-8d9343f6781c",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 243, DateTimeKind.Local).AddTicks(7880),
                            Description = "Car",
                            IsActive = true,
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 243, DateTimeKind.Local).AddTicks(7890)
                        },
                        new
                        {
                            Id = "ccf6c9bc-0d21-44e6-9c23-4dc972119629",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 243, DateTimeKind.Local).AddTicks(7893),
                            Description = "Savings",
                            IsActive = true,
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 243, DateTimeKind.Local).AddTicks(7894)
                        });
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.CurrencyModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InternationalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = "3bcd0327-526b-4cae-8195-cc2bf9fcb0f9",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4448),
                            InternationalCode = "EUR",
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4483),
                            Name = "EURO"
                        },
                        new
                        {
                            Id = "65264ffa-443a-45c9-961a-b17e9b347a61",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4487),
                            InternationalCode = "GBP",
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4489),
                            Name = "Pound Sterling"
                        },
                        new
                        {
                            Id = "43143a5f-c29d-45b7-8853-f403c4159677",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4491),
                            InternationalCode = "USD",
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4493),
                            Name = "American Dollar"
                        },
                        new
                        {
                            Id = "99b25d53-b440-4adc-8052-e4f1ddf946bd",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4495),
                            InternationalCode = "BRL",
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 262, DateTimeKind.Local).AddTicks(4497),
                            Name = "Brazilian Real"
                        });
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.EmailModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(600)")
                        .HasMaxLength(600);

                    b.Property<int?>("EmailType")
                        .HasColumnType("integer");

                    b.Property<string>("MMUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("PreferedEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.EntryModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("CostCenterId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EntryConfirmedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntryType")
                        .HasColumnType("integer");

                    b.Property<decimal>("EntryValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentTypeId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("CostCenterId")
                        .IsUnique();

                    b.HasIndex("PaymentTypeId")
                        .IsUnique();

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("MMUser");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.PaymentTypeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Id = "e99f3c2b-d57d-4822-9452-ed2161153067",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2283),
                            Description = "Bank Transfer",
                            IsActive = true,
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2305)
                        },
                        new
                        {
                            Id = "ba21efe5-aec1-4050-b1b3-803eac614462",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2541),
                            Description = "Debit Card",
                            IsActive = true,
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2549)
                        },
                        new
                        {
                            Id = "4c3cb023-0f48-494b-9349-227fb3a7f1e9",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2551),
                            Description = "Credit Card",
                            IsActive = true,
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2554)
                        },
                        new
                        {
                            Id = "813cd57e-1d5b-4b62-8ae4-7f2ab1a6eead",
                            CreateDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2556),
                            Description = "Paycheck",
                            IsActive = true,
                            ModifiedDate = new DateTime(2021, 8, 12, 1, 14, 49, 265, DateTimeKind.Local).AddTicks(2558)
                        });
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.PhoneModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AreaNumber")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("CountryNumber")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MMUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<bool>("PreferedNumber")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.AccountModel", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.CurrencyModel", "Currency")
                        .WithOne()
                        .HasForeignKey("MoneyManager.SaraivaDev.API.Models.Domain.AccountModel", "CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", "MMUser")
                        .WithMany()
                        .HasForeignKey("MMUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.AddressModel", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", "MMUser")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.CategoryModel", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.CategoryModel", "CategoryFather")
                        .WithMany()
                        .HasForeignKey("CategoryFatherId1");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.CostCenterModel", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.CostCenterModel", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.EmailModel", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", "MMUser")
                        .WithMany("Emails")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.EntryModel", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.AccountModel", "Account")
                        .WithMany("Entries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.CategoryModel", "Category")
                        .WithOne()
                        .HasForeignKey("MoneyManager.SaraivaDev.API.Models.Domain.EntryModel", "CategoryId");

                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.CostCenterModel", "CostCenter")
                        .WithOne()
                        .HasForeignKey("MoneyManager.SaraivaDev.API.Models.Domain.EntryModel", "CostCenterId");

                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.PaymentTypeModel", "PaymentType")
                        .WithOne()
                        .HasForeignKey("MoneyManager.SaraivaDev.API.Models.Domain.EntryModel", "PaymentTypeId");
                });

            modelBuilder.Entity("MoneyManager.SaraivaDev.API.Models.Domain.PhoneModel", b =>
                {
                    b.HasOne("MoneyManager.SaraivaDev.API.Models.Domain.MMUserModel", "MMUser")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
